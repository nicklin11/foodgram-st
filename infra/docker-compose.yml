# ./infra/docker-compose.yml

volumes:
  foodgram_db_data:
  static_volume: # For Django admin and other backend static files
  media_volume:  # For user-uploaded media files

services:
  db:
    image: postgres:13.10-alpine
    container_name: foodgram_db
    volumes:
      - foodgram_db_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    ports: # Optional: Only if you need to access DB directly from host
      - "5432:5432"
    healthcheck: # Good practice to wait for DB to be ready
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    container_name: foodgram_backend
    build:
      context: ../backend
      dockerfile: Dockerfile
    restart: always
    volumes:
      - static_volume:/app/staticfiles/ # Django collectstatic output
      - media_volume:/app/media/        # User uploads
      - ../backend:/app/                # Mount source code for easier development (remove for prod-like builds)
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be healthy
    env_file:
      - ./.env
    expose:
      - "8000"
    # Use an entrypoint script to handle migrations and data loading
    entrypoint: /app/entrypoint.sh
    command: ["gunicorn", "--bind", "0.0.0.0:8000", "foodgram.wsgi:application"]

  frontend: # This service is only for building frontend assets
    container_name: foodgram_front_builder
    build:
      context: ../frontend
      dockerfile: Dockerfile
    volumes:
      # This copies the built assets from container's /app/result_build to host's ../frontend/build
      - ../frontend/build:/app/result_build/
    # No command needed here as the Dockerfile's CMD will copy files.
    # It will build and then exit.

  nginx:
    container_name: foodgram_nginx
    image: nginx:1.25.4-alpine
    ports:
      - "80:80" # For HTTP
      # - "443:443" # Uncomment if you add HTTPS
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      # This volume makes the frontend build (copied to host by 'frontend' service) available to Nginx
      - ../frontend/build:/usr/share/nginx/html/frontend_build/
      - ../docs/:/usr/share/nginx/html/api/docs/
      - static_volume:/usr/share/nginx/html/django_static_files/  # Django admin static
      - media_volume:/usr/share/nginx/html/media/    # User-uploaded media
    depends_on:
      - backend
      - frontend # Ensures frontend build is attempted before Nginx starts
    s